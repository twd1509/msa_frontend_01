{"ast":null,"code":"var _jsxFileName = \"C:\\\\kit\\\\react\\\\video-app\\\\src\\\\aiRequest\\\\GetSurveyData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"../aiRequest/css/reqStyle.css\";\nimport { MemberInfoContext } from '../components/MemberInfoContext';\nimport SrvyUpdate from '../aiRequest/SrvyUpdate'; // 수정 컴포넌트 가져오기\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetSurveyData = () => {\n  _s();\n  const {\n    email: paramEmail,\n    groupNo\n  } = useParams();\n  const {\n    email: memberEmail\n  } = useContext(MemberInfoContext);\n\n  // email을 URL 파라미터에서 가져오되, 없으면 로그인한 사용자 정보에서 가져옴\n  const email = paramEmail || memberEmail;\n  const [formData, setFormData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // 만족도 조사 데이터 불러오기\n  useEffect(() => {\n    console.log(\"email:\", email, \"groupNo:\", groupNo); // 값 확인\n    if (!email || !groupNo) return;\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:9193/api/GetSurveyData/${email}/${groupNo}`, {\n          method: \"GET\"\n        });\n        const result = await response.json();\n        console.log('Survey Data:', result); // 응답 데이터 확인\n        setFormData(Array.isArray(result) ? result : []);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [email, groupNo]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB370\\uC774\\uD130 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(SrvyUpdate, {\n    formData: formData,\n    setFormData: setFormData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(GetSurveyData, \"TNFetcVsXCZme8b8V74vT+HBQBo=\", false, function () {\n  return [useParams];\n});\n_c = GetSurveyData;\nexport default GetSurveyData;\nvar _c;\n$RefreshReg$(_c, \"GetSurveyData\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","MemberInfoContext","SrvyUpdate","jsxDEV","_jsxDEV","GetSurveyData","_s","email","paramEmail","groupNo","memberEmail","formData","setFormData","loading","setLoading","console","log","fetchData","response","fetch","method","result","json","Array","isArray","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/kit/react/video-app/src/aiRequest/GetSurveyData.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom'; \r\nimport \"../aiRequest/css/reqStyle.css\";\r\nimport {MemberInfoContext} from '../components/MemberInfoContext';\r\nimport SrvyUpdate from '../aiRequest/SrvyUpdate'; // 수정 컴포넌트 가져오기\r\n\r\nconst GetSurveyData = () => {\r\n    const { email: paramEmail, groupNo } = useParams();\r\n    const { email: memberEmail } = useContext(MemberInfoContext);\r\n\r\n    // email을 URL 파라미터에서 가져오되, 없으면 로그인한 사용자 정보에서 가져옴\r\n    const email = paramEmail || memberEmail;\r\n\r\n    const [formData, setFormData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // 만족도 조사 데이터 불러오기\r\n    useEffect(() => {\r\n        console.log(\"email:\", email, \"groupNo:\", groupNo); // 값 확인\r\n        if (!email || !groupNo) return;\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(\r\n                    `http://localhost:9193/api/GetSurveyData/${email}/${groupNo}`, {\r\n                        method: \"GET\"\r\n                    }\r\n                );\r\n                const result = await response.json();\r\n                console.log('Survey Data:', result); // 응답 데이터 확인\r\n                setFormData(Array.isArray(result) ? result : []);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [email, groupNo]);\r\n\r\n    if (loading) return <div>데이터 불러오는 중...</div>;\r\n\r\n    return (\r\n        <SrvyUpdate formData={formData} setFormData={setFormData} />\r\n    );\r\n};\r\n\r\nexport default GetSurveyData;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,+BAA+B;AACtC,SAAQC,iBAAiB,QAAO,iCAAiC;AACjE,OAAOC,UAAU,MAAM,yBAAyB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,KAAK,EAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGT,SAAS,CAAC,CAAC;EAClD,MAAM;IAAEO,KAAK,EAAEG;EAAY,CAAC,GAAGX,UAAU,CAACE,iBAAiB,CAAC;;EAE5D;EACA,MAAMM,KAAK,GAAGC,UAAU,IAAIE,WAAW;EAEvC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACZkB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAET,KAAK,EAAE,UAAU,EAAEE,OAAO,CAAC,CAAC,CAAC;IACnD,IAAI,CAACF,KAAK,IAAI,CAACE,OAAO,EAAE;IAExB,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,2CAA2CZ,KAAK,IAAIE,OAAO,EAAE,EAAE;UAC3DW,MAAM,EAAE;QACZ,CACJ,CAAC;QACD,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACpCP,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEK,MAAM,CAAC,CAAC,CAAC;QACrCT,WAAW,CAACW,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GAAGA,MAAM,GAAG,EAAE,CAAC;MACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD,CAAC,SAAS;QACNX,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IACDG,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACV,KAAK,EAAEE,OAAO,CAAC,CAAC;EAEpB,IAAII,OAAO,EAAE,oBAAOT,OAAA;IAAAsB,QAAA,EAAK;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE5C,oBACI1B,OAAA,CAACF,UAAU;IAACS,QAAQ,EAAEA,QAAS;IAACC,WAAW,EAAEA;EAAY;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEpE,CAAC;AAACxB,EAAA,CAvCID,aAAa;EAAA,QACwBL,SAAS;AAAA;AAAA+B,EAAA,GAD9C1B,aAAa;AAyCnB,eAAeA,aAAa;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}