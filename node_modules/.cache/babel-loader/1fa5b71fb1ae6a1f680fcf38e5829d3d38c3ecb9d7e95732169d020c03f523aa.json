{"ast":null,"code":"var _jsxFileName = \"C:\\\\kit\\\\react\\\\video-app\\\\src\\\\aiRequest\\\\UserGetSrvy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\nimport \"../aiRequest/css/reqStyle.css\";\nimport { MemberInfoContext } from '../components/MemberInfoContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserGetSrvy = () => {\n  _s();\n  const memberInfo = useContext(MemberInfoContext);\n  const {\n    email: paramEmail,\n    groupNo\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate(); // 뒤로 가기 기능 추가\n  const [email, setEmail] = useState('');\n  const [questions, setQuestions] = useState([]);\n  //const [answers, setAnswers] = useState([]);\n  const [multipleChoiceAnswers, setMultipleChoiceAnswers] = useState([]); // 객관식 답변 배열\n  const [shortAnswerResponses, setShortAnswerResponses] = useState([]); // 단답형 답변 배열\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (paramEmail) {\n      setEmail(paramEmail);\n    }\n  }, [location.search]);\n  useEffect(() => {\n    fetch(`http://localhost:9193/api/SrvyResponse/check?email=${email}&groupNo=${groupNo}`).then(response => {\n      if (response.status === 403) {\n        alert(\"이미 응답한 설문입니다.\");\n        navigate(-1); // ❗ 자동으로 뒤로 가기\n        return;\n      }\n      return response.json();\n    }).catch(error => {\n      console.error(\"❌ 오류 발생:\", error);\n      alert(\"설문 응답 여부 확인 중 문제가 발생했습니다.\");\n      navigate(-1);\n    });\n    const fetchQuestions = async () => {\n      if (!email || !groupNo) return; // 값이 없으면 실행 안 함\n\n      try {\n        const response = await fetch(`http://localhost:9193/api/UserGetSrvy/${email}/${groupNo}`);\n        if (!response.ok) {\n          throw new Error(`네트워크 오류: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('받은 데이터:', data);\n        if (Array.isArray(data)) {\n          setQuestions(data);\n          //setAnswers(new Array(data.length).fill(''));\n          setMultipleChoiceAnswers(new Array(data.filter(q => q.srvyType === '객관식').length).fill(''));\n          setShortAnswerResponses(new Array(data.filter(q => q.srvyType === '단답형').length).fill(''));\n        } else {\n          throw new Error('받은 데이터가 배열이 아닙니다.');\n        }\n      } catch (error) {\n        console.error('질문 불러오기 오류:', error);\n        setError(error.message);\n      }\n    };\n    fetchQuestions();\n  }, [email, groupNo]); // email과 groupNo가 설정된 후 실행\n  //console.log('questions:', questions); // 질문 목록\n  //console.log('answers:', answers); // 답변 목록\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    const questionIndex = parseInt(name.split('-')[1]);\n    //const index = parseInt(name.split('-')[1]);\n    if (event.target.type === 'radio') {\n      setMultipleChoiceAnswers(prevAnswers => {\n        const newAnswers = [...prevAnswers];\n        newAnswers[questionIndex] = value; // 객관식 답변\n        return newAnswers;\n      });\n    } else if (event.target.type === 'text') {\n      setShortAnswerResponses(prevAnswers => {\n        const newAnswers = [...prevAnswers];\n        newAnswers[questionIndex] = value; // 단답형 답변\n        return newAnswers;\n      });\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const unansweredQuestions = questions.filter((_, index) => {\n      const isMultipleChoice = questions[index].srvyType === '객관식';\n      const isShortAnswer = questions[index].srvyType === '단답형';\n      return isMultipleChoice && !multipleChoiceAnswers[index] || isShortAnswer && !shortAnswerResponses[index];\n    });\n    if (unansweredQuestions.length > 0) {\n      alert(\"모든 질문에 답변을 입력해 주세요.\");\n      return;\n    }\n    const user = {\n      email: paramEmail,\n      groupNo: groupNo,\n      submittedSrvys: questions.map((question, index) => {\n        const answer = question.srvyType === '객관식' ? multipleChoiceAnswers[index] : question.srvyType === '단답형' ? shortAnswerResponses[index] : null;\n        return {\n          memId: memberInfo.email,\n          srvyCn: question.srvyCn,\n          chcRslt: question.srvyType === '객관식' ? answer : null,\n          textRslt: question.srvyType === '단답형' ? answer : null\n        };\n      })\n    };\n    try {\n      const response = await fetch('http://localhost:9193/api/SrvyResponse', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n      if (!response.ok) {\n        throw new Error(`서버 오류: ${response.status}`);\n      }\n      alert('답변이 제출되었습니다!');\n      window.location.href = \"/requirements/RequirementList\";\n    } catch (error) {\n      console.error('제출 오류:', error);\n      alert('답변 제출에 실패했습니다.');\n      window.location.href = \"/requirements/RequirementList\";\n    }\n  };\n  if (memberInfo.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 16\n    }, this);\n  }\n  if (!memberInfo.email) {\n    alert(\"로그인이 필요합니다.\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/lgn/Lgn\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aiR-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uB9CC\\uC871\\uB3C4 \\uC870\\uC0AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"aiR-box\",\n      onSubmit: handleSubmit,\n      children: [questions.length > 0 ? questions.map((question, questionIndex) => (console.log(question.chc),\n      /*#__PURE__*/\n      // 이 부분으로 chc 값을 확인\n      _jsxDEV(\"div\", {\n        className: \"aiR-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question.srvyCn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this), question.srvyType === '객관식' ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"options\",\n          children: question.chc && question.chc.split(',').map((option, index) => {\n            const optionId = `q${question.surveyNo}-option-${index}`; // 고유한 id 생성\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `q${question.surveyNo || 'default'}-${questionIndex}` // 기본값 'default' 제공\n                ,\n                id: optionId,\n                value: option.trim(),\n                checked: multipleChoiceAnswers[questionIndex] === option.trim(),\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: optionId,\n                children: option.trim()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 49\n              }, this)]\n            }, optionId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 45\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 33\n        }, this) : question.srvyType === '단답형' ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: `q${question.surveyNo || 'default'}-${questionIndex}` // 고유한 이름 설정\n          ,\n          id: `q${question.surveyNo}-text` // 고유한 id 추가\n          ,\n          value: shortAnswerResponses[questionIndex] || '',\n          onChange: handleChange,\n          placeholder: \"\\uB2F5\\uBCC0\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 33\n        }, this) : null]\n      }, question.surveyNo, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }, this))) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uC9C8\\uBB38\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\uB4F1\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => window.history.back(),\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s(UserGetSrvy, \"UqboPQ+vI5UlNWs7FeswJmRNjpk=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = UserGetSrvy;\nexport default UserGetSrvy;\nvar _c;\n$RefreshReg$(_c, \"UserGetSrvy\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","useLocation","useNavigate","Navigate","MemberInfoContext","jsxDEV","_jsxDEV","UserGetSrvy","_s","memberInfo","email","paramEmail","groupNo","location","navigate","setEmail","questions","setQuestions","multipleChoiceAnswers","setMultipleChoiceAnswers","shortAnswerResponses","setShortAnswerResponses","error","setError","search","fetch","then","response","status","alert","json","catch","console","fetchQuestions","ok","Error","data","log","Array","isArray","filter","q","srvyType","length","fill","message","handleChange","event","name","value","target","questionIndex","parseInt","split","type","prevAnswers","newAnswers","handleSubmit","preventDefault","unansweredQuestions","_","index","isMultipleChoice","isShortAnswer","user","submittedSrvys","map","question","answer","memId","srvyCn","chcRslt","textRslt","method","headers","body","JSON","stringify","window","href","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","className","id","onSubmit","chc","option","optionId","surveyNo","trim","checked","onChange","htmlFor","placeholder","onClick","history","back","_c","$RefreshReg$"],"sources":["C:/kit/react/video-app/src/aiRequest/UserGetSrvy.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useLocation, useNavigate, Navigate } from 'react-router-dom';\r\nimport \"../aiRequest/css/reqStyle.css\";\r\nimport {MemberInfoContext} from '../components/MemberInfoContext';\r\n\r\nconst UserGetSrvy = () => {\r\n    const memberInfo  = useContext(MemberInfoContext);\r\n    const { email: paramEmail, groupNo } = useParams();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();  // 뒤로 가기 기능 추가\r\n    const [email, setEmail] = useState('');\r\n    const [questions, setQuestions] = useState([]);\r\n    //const [answers, setAnswers] = useState([]);\r\n    const [multipleChoiceAnswers, setMultipleChoiceAnswers] = useState([]); // 객관식 답변 배열\r\n    const [shortAnswerResponses, setShortAnswerResponses] = useState([]); // 단답형 답변 배열\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (paramEmail) {\r\n            setEmail(paramEmail);\r\n        }\r\n    }, [location.search]);\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:9193/api/SrvyResponse/check?email=${email}&groupNo=${groupNo}`)\r\n            .then(response => {\r\n                if (response.status === 403) {\r\n                    alert(\"이미 응답한 설문입니다.\");\r\n                    navigate(-1);  // ❗ 자동으로 뒤로 가기\r\n                    return;\r\n                }\r\n                return response.json();\r\n            })\r\n            .catch(error => {\r\n                console.error(\"❌ 오류 발생:\", error);\r\n                alert(\"설문 응답 여부 확인 중 문제가 발생했습니다.\");\r\n                navigate(-1);\r\n            });\r\n\r\n        const fetchQuestions = async () => {\r\n            if (!email || !groupNo) return; // 값이 없으면 실행 안 함\r\n    \r\n            try {\r\n                const response = await fetch(`http://localhost:9193/api/UserGetSrvy/${email}/${groupNo}`);\r\n    \r\n                if (!response.ok) {\r\n                    throw new Error(`네트워크 오류: ${response.status}`);\r\n                }\r\n    \r\n                const data = await response.json();\r\n                console.log('받은 데이터:', data);\r\n    \r\n                if (Array.isArray(data)) {\r\n                    setQuestions(data);\r\n                    //setAnswers(new Array(data.length).fill(''));\r\n                    setMultipleChoiceAnswers(new Array(data.filter(q => q.srvyType === '객관식').length).fill(''));\r\n                    setShortAnswerResponses(new Array(data.filter(q => q.srvyType === '단답형').length).fill(''));\r\n                } else {\r\n                    throw new Error('받은 데이터가 배열이 아닙니다.');\r\n                }\r\n            } catch (error) {\r\n                console.error('질문 불러오기 오류:', error);\r\n                setError(error.message);\r\n            }\r\n        };\r\n    \r\n        fetchQuestions();\r\n    }, [email, groupNo]); // email과 groupNo가 설정된 후 실행\r\n    //console.log('questions:', questions); // 질문 목록\r\n    //console.log('answers:', answers); // 답변 목록\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        const questionIndex = parseInt(name.split('-')[1]);\r\n        //const index = parseInt(name.split('-')[1]);\r\n        if (event.target.type === 'radio') {\r\n            setMultipleChoiceAnswers(prevAnswers => {\r\n                const newAnswers = [...prevAnswers];\r\n                newAnswers[questionIndex] = value; // 객관식 답변\r\n                return newAnswers;\r\n            });\r\n        } else if (event.target.type === 'text') {\r\n            setShortAnswerResponses(prevAnswers => {\r\n                const newAnswers = [...prevAnswers];\r\n                newAnswers[questionIndex] = value; // 단답형 답변\r\n                return newAnswers;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (event) => { \r\n        event.preventDefault();\r\n\r\n        const unansweredQuestions = questions.filter((_, index) => {\r\n            const isMultipleChoice = questions[index].srvyType === '객관식';\r\n            const isShortAnswer = questions[index].srvyType === '단답형';\r\n            return (isMultipleChoice && !multipleChoiceAnswers[index]) || (isShortAnswer && !shortAnswerResponses[index]);\r\n        });\r\n\r\n        if (unansweredQuestions.length > 0) {\r\n            alert(\"모든 질문에 답변을 입력해 주세요.\");\r\n            return;\r\n        }\r\n\r\n        const user = {\r\n            email: paramEmail,\r\n            groupNo: groupNo,\r\n            submittedSrvys: questions.map((question, index) => {\r\n                const answer = question.srvyType === '객관식'\r\n                    ? multipleChoiceAnswers[index]\r\n                    : question.srvyType === '단답형'\r\n                    ? shortAnswerResponses[index]\r\n                    : null;\r\n\r\n                return {\r\n                    memId: memberInfo.email,\r\n                    srvyCn: question.srvyCn, \r\n                    chcRslt: question.srvyType === '객관식' ? answer : null,\r\n                    textRslt: question.srvyType === '단답형' ? answer : null,\r\n                };\r\n            })\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:9193/api/SrvyResponse', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(user)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`서버 오류: ${response.status}`);\r\n            }\r\n\r\n            alert('답변이 제출되었습니다!');\r\n            window.location.href = \"/requirements/RequirementList\";\r\n        } catch (error) {\r\n            console.error('제출 오류:', error);\r\n            alert('답변 제출에 실패했습니다.');\r\n            window.location.href = \"/requirements/RequirementList\";\r\n        }\r\n    };\r\n\r\n    if(memberInfo.loading) {\r\n        return <div>로딩 중...</div>\r\n    }\r\n\r\n    if(!memberInfo.email) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        return <Navigate to=\"/lgn/Lgn\" replace />\r\n    }\r\n    return (\r\n        <div className=\"aiR-container\">\r\n            <h1>만족도 조사</h1>\r\n            {error && <p className=\"error\">{error}</p>}\r\n            <form id=\"aiR-box\" onSubmit={handleSubmit}>\r\n                {questions.length > 0 ? (\r\n                    questions.map((question, questionIndex) => (\r\n                        console.log(question.chc), // 이 부분으로 chc 값을 확인\r\n                        <div className=\"aiR-box\" key={question.surveyNo}>\r\n                            <h2>{question.srvyCn}</h2>\r\n                            {question.srvyType === '객관식' ? (\r\n                                <ul className=\"options\">\r\n                                    {question.chc && question.chc.split(',').map((option, index) => {\r\n                                        const optionId = `q${question.surveyNo}-option-${index}`; // 고유한 id 생성\r\n                                        return (\r\n                                            <li key={optionId}>\r\n                                                <input \r\n                                                    type=\"radio\" \r\n                                                    name={`q${question.surveyNo || 'default'}-${questionIndex}`} // 기본값 'default' 제공\r\n                                                    id={optionId}\r\n                                                    value={option.trim()} \r\n                                                    checked={multipleChoiceAnswers[questionIndex] === option.trim()} \r\n                                                    onChange={handleChange} \r\n                                                />\r\n                                                <label htmlFor={optionId}>{option.trim()}</label>\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            ) : question.srvyType === '단답형' ? (\r\n                                <input \r\n                                    type=\"text\" \r\n                                    name={`q${question.surveyNo || 'default'}-${questionIndex}`} // 고유한 이름 설정\r\n                                    id={`q${question.surveyNo}-text`} // 고유한 id 추가\r\n                                    value={shortAnswerResponses[questionIndex] || ''} \r\n                                    onChange={handleChange} \r\n                                    placeholder=\"답변을 입력하세요\" \r\n                                />\r\n                            ) : null}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>질문이 없습니다.</p>\r\n                )}\r\n                <div className=\"button-container\">\r\n                    <button type=\"submit\">등록</button>\r\n                    <button type=\"button\" onClick={() => window.history.back()}>취소</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserGetSrvy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}